{
  Signer: [Function: Signer] { isSigner: [Function (anonymous)] },
  Wallet: [Function: Wallet] {
    createRandom: [Function (anonymous)],
    fromEncryptedJson: [Function (anonymous)],
    fromEncryptedJsonSync: [Function (anonymous)],
    fromMnemonic: [Function (anonymous)]
  },
  VoidSigner: [Function: VoidSigner],
  getDefaultProvider: [Function: getDefaultProvider],
  providers: {
    Provider: [Getter],
    BaseProvider: [Getter],
    Resolver: [Getter],
    UrlJsonRpcProvider: [Getter],
    FallbackProvider: [Getter],
    AlchemyProvider: [Getter],
    AlchemyWebSocketProvider: [Getter],
    AnkrProvider: [Getter],
    CloudflareProvider: [Getter],
    EtherscanProvider: [Getter],
    InfuraProvider: [Getter],
    InfuraWebSocketProvider: [Getter],
    JsonRpcProvider: [Getter],
    JsonRpcBatchProvider: [Getter],
    NodesmithProvider: [Getter],
    PocketProvider: [Getter],
    StaticJsonRpcProvider: [Getter],
    Web3Provider: [Getter],
    WebSocketProvider: [Getter],
    IpcProvider: [Getter],
    JsonRpcSigner: [Getter],
    getDefaultProvider: [Function: getDefaultProvider],
    getNetwork: [Getter],
    isCommunityResource: [Getter],
    isCommunityResourcable: [Getter],
    showThrottleMessage: [Getter],
    Formatter: [Getter]
  },
  BaseContract: [Function: BaseContract] {
    getContractAddress: [Function (anonymous)],
    getInterface: [Function (anonymous)],
    isIndexed: [Function (anonymous)]
  },
  Contract: [Function: Contract],
  ContractFactory: [Function: ContractFactory] {
    fromSolidity: [Function (anonymous)],
    getInterface: [Function (anonymous)],
    getContractAddress: [Function (anonymous)],
    getContract: [Function (anonymous)]
  },
  BigNumber: [Function: BigNumber] {
    from: [Function (anonymous)],
    isBigNumber: [Function (anonymous)]
  },
  FixedNumber: [Function: FixedNumber] {
    fromValue: [Function (anonymous)],
    fromString: [Function (anonymous)],
    fromBytes: [Function (anonymous)],
    from: [Function (anonymous)],
    isFixedNumber: [Function (anonymous)]
  },
  constants: {
    AddressZero: [Getter],
    NegativeOne: [Getter],
    Zero: [Getter],
    One: [Getter],
    Two: [Getter],
    WeiPerEther: [Getter],
    MaxUint256: [Getter],
    MinInt256: [Getter],
    MaxInt256: [Getter],
    HashZero: [Getter],
    EtherSymbol: [Getter]
  },
  errors: {
    UNKNOWN_ERROR: 'UNKNOWN_ERROR',
    NOT_IMPLEMENTED: 'NOT_IMPLEMENTED',
    UNSUPPORTED_OPERATION: 'UNSUPPORTED_OPERATION',
    NETWORK_ERROR: 'NETWORK_ERROR',
    SERVER_ERROR: 'SERVER_ERROR',
    TIMEOUT: 'TIMEOUT',
    BUFFER_OVERRUN: 'BUFFER_OVERRUN',
    NUMERIC_FAULT: 'NUMERIC_FAULT',
    MISSING_NEW: 'MISSING_NEW',
    INVALID_ARGUMENT: 'INVALID_ARGUMENT',
    MISSING_ARGUMENT: 'MISSING_ARGUMENT',
    UNEXPECTED_ARGUMENT: 'UNEXPECTED_ARGUMENT',
    CALL_EXCEPTION: 'CALL_EXCEPTION',
    INSUFFICIENT_FUNDS: 'INSUFFICIENT_FUNDS',
    NONCE_EXPIRED: 'NONCE_EXPIRED',
    REPLACEMENT_UNDERPRICED: 'REPLACEMENT_UNDERPRICED',
    UNPREDICTABLE_GAS_LIMIT: 'UNPREDICTABLE_GAS_LIMIT',
    TRANSACTION_REPLACED: 'TRANSACTION_REPLACED'
  },
  logger: Logger { version: 'ethers/5.6.5' },
  utils: {
    AbiCoder: [Getter],
    defaultAbiCoder: [Getter],
    Fragment: [Getter],
    ConstructorFragment: [Getter],
    ErrorFragment: [Getter],
    EventFragment: [Getter],
    FunctionFragment: [Getter],
    ParamType: [Getter],
    FormatTypes: [Getter],
    checkResultErrors: [Getter],
    Logger: [Getter],
    RLP: { encode: [Function: encode], decode: [Function: decode] },
    _fetchData: [Getter],
    fetchJson: [Getter],
    poll: [Getter],
    checkProperties: [Getter],
    deepCopy: [Getter],
    defineReadOnly: [Getter],
    getStatic: [Getter],
    resolveProperties: [Getter],
    shallowCopy: [Getter],
    arrayify: [Getter],
    concat: [Getter],
    stripZeros: [Getter],
    zeroPad: [Getter],
    isBytes: [Getter],
    isBytesLike: [Getter],
    defaultPath: [Getter],
    HDNode: [Getter],
    SigningKey: [Getter],
    Interface: [Getter],
    LogDescription: [Getter],
    TransactionDescription: [Getter],
    base58: [Getter],
    base64: { decode: [Getter], encode: [Getter] },
    hexlify: [Getter],
    isHexString: [Getter],
    hexConcat: [Getter],
    hexStripZeros: [Getter],
    hexValue: [Getter],
    hexZeroPad: [Getter],
    hexDataLength: [Getter],
    hexDataSlice: [Getter],
    nameprep: [Getter],
    _toEscapedUtf8String: [Getter],
    toUtf8Bytes: [Getter],
    toUtf8CodePoints: [Getter],
    toUtf8String: [Getter],
    Utf8ErrorFuncs: [Getter],
    formatBytes32String: [Getter],
    parseBytes32String: [Getter],
    dnsEncode: [Getter],
    hashMessage: [Getter],
    namehash: [Getter],
    isValidName: [Getter],
    id: [Getter],
    _TypedDataEncoder: [Getter],
    getAddress: [Getter],
    getIcapAddress: [Getter],
    getContractAddress: [Getter],
    getCreate2Address: [Getter],
    isAddress: [Getter],
    formatEther: [Getter],
    parseEther: [Getter],
    formatUnits: [Getter],
    parseUnits: [Getter],
    commify: [Getter],
    computeHmac: [Getter],
    keccak256: [Getter],
    ripemd160: [Getter],
    sha256: [Getter],
    sha512: [Getter],
    randomBytes: [Getter],
    shuffled: [Getter],
    solidityPack: [Getter],
    solidityKeccak256: [Getter],
    soliditySha256: [Getter],
    splitSignature: [Getter],
    joinSignature: [Getter],
    accessListify: [Getter],
    parseTransaction: [Getter],
    serializeTransaction: [Getter],
    TransactionTypes: [Getter],
    getJsonWalletAddress: [Getter],
    computeAddress: [Getter],
    recoverAddress: [Getter],
    computePublicKey: [Getter],
    recoverPublicKey: [Getter],
    verifyMessage: [Getter],
    verifyTypedData: [Getter],
    getAccountPath: [Getter],
    mnemonicToEntropy: [Getter],
    entropyToMnemonic: [Getter],
    isValidMnemonic: [Getter],
    mnemonicToSeed: [Getter],
    SupportedAlgorithm: [Getter],
    UnicodeNormalizationForm: [Getter],
    Utf8ErrorReason: [Getter],
    Indexed: [Getter]
  },
  wordlists: {
    cz: LangCz { locale: 'cz' },
    en: LangEn { locale: 'en' },
    es: LangEs { locale: 'es' },
    fr: LangFr { locale: 'fr' },
    it: LangIt { locale: 'it' },
    ja: LangJa { locale: 'ja' },
    ko: LangKo { locale: 'ko' },
    zh: LangZh { locale: 'zh_cn' },
    zh_cn: LangZh { locale: 'zh_cn' },
    zh_tw: LangZh { locale: 'zh_tw' }
  },
  version: 'ethers/5.6.5',
  Wordlist: [Function: Wordlist] {
    check: [Function (anonymous)],
    register: [Function (anonymous)]
  },
  provider: EthersProviderWrapper {
    _isProvider: true,
    _events: [],
    _emitted: { block: -2 },
    disableCcipRead: false,
    formatter: Formatter { formats: [Object] },
    anyNetwork: false,
    _networkPromise: Promise {
      [Object],
      [Symbol(async_id_symbol)]: 116,
      [Symbol(trigger_async_id_symbol)]: 115,
      [Symbol(destroyed)]: [Object]
    },
    _maxInternalBlockNumber: -1024,
    _lastBlockNumber: -2,
    _maxFilterBlockRange: 10,
    _pollingInterval: 4000,
    _fastQueryDate: 0,
    connection: { url: 'http://localhost:8545' },
    _nextId: 42,
    _hardhatProvider: BackwardsCompatibilityProviderAdapter {
      _wrapped: FixedGasProvider {
        _wrapped: AutomaticSenderProvider {
          _wrapped: [HardhatNetworkProvider],
          _wrappedProvider: [HardhatNetworkProvider]
        },
        _wrappedProvider: AutomaticSenderProvider {
          _wrapped: [HardhatNetworkProvider],
          _wrappedProvider: [HardhatNetworkProvider]
        },
        _gasLimit: 30000000
      },
      _provider: FixedGasProvider {
        _wrapped: AutomaticSenderProvider {
          _wrapped: [HardhatNetworkProvider],
          _wrappedProvider: [HardhatNetworkProvider]
        },
        _wrappedProvider: AutomaticSenderProvider {
          _wrapped: [HardhatNetworkProvider],
          _wrappedProvider: [HardhatNetworkProvider]
        },
        _gasLimit: 30000000
      },
      sendAsync: [Function: bound sendAsync],
      send: [Function: bound send],
      _sendJsonRpcRequest: [Function: bound _sendJsonRpcRequest] AsyncFunction
    },
    _eventLoopCache: { detectNetwork: null },
    _network: { chainId: 31337, name: 'unknown' }
  },
  getSigner: [Function: getSigner],
  getSigners: [Function: getSigners],
  getContractFactory: [Function: bound getContractFactory] AsyncFunction,
  getContractFactoryFromArtifact: [Function: bound getContractFactoryFromArtifact] AsyncFunction,
  getContractAt: [Function: bound getContractAt] AsyncFunction,
  getContractAtFromArtifact: [Function: bound getContractAtFromArtifact] AsyncFunction
}